// <auto-generated />
using System;
using GetTogether.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GetTogether.DAL.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230412200437_Fix_database")]
    partial class Fix_database
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GetTogether.DAL.Entities.ChatGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("ChatGroups");
                });

            modelBuilder.Entity("GetTogether.DAL.Entities.Image", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Url")
                        .IsUnique();

                    b.ToTable("Image");
                });

            modelBuilder.Entity("GetTogether.DAL.Entities.Message", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RepliedPersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId")
                        .IsUnique();

                    b.HasIndex("ChatId");

                    b.HasIndex("RepliedPersonId")
                        .IsUnique();

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("GetTogether.DAL.Entities.Party", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Privacy")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Parties");
                });

            modelBuilder.Entity("GetTogether.DAL.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ImageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "carmen.net",
                            Email = "Laura36@hotmail.com",
                            Login = "Laura63",
                            Name = "Laura"
                        },
                        new
                        {
                            Id = 2L,
                            Description = "vivian.info",
                            Email = "Jody11@hotmail.com",
                            Login = "Jody12",
                            Name = "Jody"
                        },
                        new
                        {
                            Id = 3L,
                            Description = "lew.org",
                            Email = "Harriet93@hotmail.com",
                            Login = "Harriet.Schmidt",
                            Name = "Harriet"
                        },
                        new
                        {
                            Id = 4L,
                            Description = "jacinthe.name",
                            Email = "Dewey.Wehner@gmail.com",
                            Login = "Dewey.Wehner21",
                            Name = "Dewey"
                        },
                        new
                        {
                            Id = 5L,
                            Description = "jaden.org",
                            Email = "Leslie99@hotmail.com",
                            Login = "Leslie_Wolf",
                            Name = "Leslie"
                        });
                });

            modelBuilder.Entity("object", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("PartyId")
                        .HasColumnType("bigint");

                    b.Property<long>("FollowerId")
                        .HasColumnType("bigint");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrganizerId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "PartyId");

                    b.HasIndex("FollowerId");

                    b.HasIndex("GroupId");

                    b.HasIndex("OrganizerId");

                    b.HasIndex("PartyId");

                    b.ToTable("PartyVisitors", (string)null);
                });

            modelBuilder.Entity("GetTogether.DAL.Entities.ChatGroup", b =>
                {
                    b.HasOne("GetTogether.DAL.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("GetTogether.DAL.Entities.Message", b =>
                {
                    b.HasOne("GetTogether.DAL.Entities.User", "Author")
                        .WithOne()
                        .HasForeignKey("GetTogether.DAL.Entities.Message", "AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetTogether.DAL.Entities.ChatGroup", "ChatGroup")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetTogether.DAL.Entities.User", "RepliedPerson")
                        .WithOne()
                        .HasForeignKey("GetTogether.DAL.Entities.Message", "RepliedPersonId");

                    b.Navigation("Author");

                    b.Navigation("ChatGroup");

                    b.Navigation("RepliedPerson");
                });

            modelBuilder.Entity("GetTogether.DAL.Entities.User", b =>
                {
                    b.HasOne("GetTogether.DAL.Entities.Image", "ImageAvatar")
                        .WithOne()
                        .HasForeignKey("GetTogether.DAL.Entities.User", "ImageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ImageAvatar");
                });

            modelBuilder.Entity("object", b =>
                {
                    b.HasOne("GetTogether.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetTogether.DAL.Entities.ChatGroup", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetTogether.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("OrganizerId")
                        .IsRequired();

                    b.HasOne("GetTogether.DAL.Entities.Party", null)
                        .WithMany()
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetTogether.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("GetTogether.DAL.Entities.ChatGroup", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
